Todo

Building with debug info disabled requires about 2 GB and 25 MB respectively. You can disable debug info by changing the value of debug-info to false in debian/config/arch/defines.



$ cd linux
$ debian/rules orig
This unpacks the upstream source and merges it with the Debian packaging.

$ debian/rules debian/control
This generates a Debian package control file based on the current definitions of the various kernel flavours which can be built.

$ fakeroot debian/rules target
Finally, build binary packages as explained in Rebuilding official Debian kernel packages, Section 4.2.

4.4 Generating orig tarball from newer upstream

First you must add a changelog entry for the new upstream version. If the new version is a release candidate, change the string -rc to ~rc. (In Debian package versions, a suffix beginning with ~ indicates a pre-release.)

The 'orig' tarball is generated by the genorig.py script. It takes either a tarball and optional patch from kernel.org, or a git repository. First ensure you have the necessary tools installed:

# apt-get install unifdef
Then if you have a tarball, run a command such as:

$ python debian/bin/genorig.py ../linux-3.4.tar.bz2 ../patch-3.5-rc1.bz2
Or if you have a git repository, pass the name of its directory:

$ python debian/bin/genorig.py ~/src/linux
Either of these will generate a file such as ../orig/linux_3.5~rc1.orig.tar.xz. You can then combine this tarball with the Debian packaging by running:

$ debian/rules orig

Codename: andy Suite: rusty Components: main bad Architectures: sparc i386 source Origin: myorg Version: 20.3 Description: my first little repository

reprepro -b $YOURBASEDIR createsymlinks
reprepro -b $YOURBASEDIR export $CODENAMES
reprepro -Vb . export # to update Packages and Release files
* reprepro -Vb . createsymlinks # to update symlinks, e.g. oldstable->etch

deb file:///$YOURBASEDIR mystuff main bad
